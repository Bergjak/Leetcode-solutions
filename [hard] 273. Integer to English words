class Solution:
    def numberToWords(self, num: int) -> str:
	if num == 0: return 'Zero'
	# Group num into size 3 substrings, eg, 123456 --> 123, 456
	# Then you will have a hash table for each size 3 group (eg, thousands, millions, billions)
	# and within each size 3 group you will have a table for the ones, tens, and hundreds place.
	# You can have at most 11 characters 
	# 19234567891 --> 19, 234, 567, 891 so we will have group0 = hundreds, group1 = Thousand, group2 = Million, group3 = Billion
	groups, num = [], list(str(num))
	start = len(num) % 3
	for i in range(start, len(num), 3): groups.append(num[i: i+3])
	if start: groups.insert(0, num[:start])
	# skip when see zero unless zero is preceded by 1
	teens = {'10': 'Ten', '11': "Eleven", '12': "Twelve", '13': "Thirteen", '14': "Fourteen", '15': "Fifteen", '16': "Sixteen", '17': "Seventeen", '18': "Eighteen", '19': "Nineteen"}
	inner_group = {0: {'0': '$', '1': "One", '2': "Two", '3': "Three", '4': "Four", '5': "Five", '6': "Six", '7': "Seven", '8': "Eight", '9': "Nine"},
				   1: {'0': '$', '2': "Twenty", '3': "Thirty", '4': "Forty", '5': "Fifty", '6': "Sixty", '7': "Seventy", '8': "Eighty", '9': "Ninety"},
				   2: {'0': '$', '1': "One Hundred", '2': "Two Hundred", '3': "Three Hundred", '4': "Four Hundred", '5': "Five Hundred", '6': "Six Hundred", '7': "Seven Hundred", '8': "Eight Hundred", '9': "Nine Hundred"}}
	res = []
	groups.reverse()
	for gnum, group in enumerate(groups):
		res.append([])

		if len(group) > 1 and group[-2] == '1':  # Teens case
			if len(group) > 2 and group[0] != '0':
					res[-1].append(inner_group[2][group[0]])
			res[-1].append(teens[''.join(group[-2:])])

		else:
			for idx, c in enumerate(group):
				if c != '0':
					res[-1].append(inner_group[len(group)-1-idx][c])

		if gnum == 1 and set(group) != set('0'):
				res[-1].append("Thousand")
		elif gnum == 2 and set(group) != set('0'):
				res[-1].append("Million")                
		elif gnum == 3 and set(group) != set('0'):
				res[-1].append("Billion")

	res.reverse()
	return " ".join([g for i in res for g in i])
