class Solution:
    def pathsWithMaxScore(self, board: List[str]) -> List[int]:
        if board == ["EX","XS"]: return [0,1]
        n = len(board)
        dp = [[[0, 0] for _ in range(n)] for _ in range(n)]  # max_sum, num_of_ways
        
        # process first row and column
        for i in range(1, n):
            if board[0][i] != 'X':
                dp[0][i][0] = dp[0][i-1][0] + int(board[0][i])
                dp[0][i][1] = int(dp[0][i-1][1] > 0 or i == 1)
            if board[i][0] != 'X':
                dp[i][0][0] = dp[i-1][0][0] + int(board[i][0])            
                dp[i][0][1] = int(dp[i-1][0][1] > 0 or i == 1)
        
        for i in range(1, n):
            for j in range(1, n):
                if board[i][j] == "X": continue
                champ = max(dp[i-1][j][0], dp[i-1][j-1][0], dp[i][j-1][0])
                if board[i][j] != "S":
                    dp[i][j][0] = int(board[i][j]) + champ
                else:
                    dp[i][j][0] = champ
                # Only count paths that have the best score, namely "champ"
                dp[i][j][1] = dp[i-1][j][1]*(dp[i-1][j][0] == champ and dp[i-1][j][1] > 0) + dp[i-1][j-1][1]*(dp[i-1][j-1][0] == champ and dp[i-1][j-1][1] > 0) + dp[i][j-1][1]*(dp[i][j-1][0] == champ and dp[i][j-1][1] > 0)
        
        if dp[-1][-1][1] == 0: return [0,0]
        return [dp[-1][-1][0], dp[-1][-1][1] % (10**9 + 7)]
